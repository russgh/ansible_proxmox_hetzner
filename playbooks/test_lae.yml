---
# Playbook to test zfs_filesystem and lae.proxmox roles

- name: "Temporary playbook for testing lae.proxmox role"
  hosts: pve
  user: root
  gather_facts: true
  # Most variables should come from the group_vars/pve/01 vars.yml file
  vars:
    pve_group: pve
    interfaces_template: "~/ansible/roles/lae.proxmox/templates/interfaces-{{ pve_group }}.j2"
    # Bridge for VMs
    vm_bridge_name: vmbr50
    vm_network_lan_subnet: "24"
    vm_network_lan_ip: "10.0.0.1"
    vm_network_vm_lan_ip: "10.0.0.254"
    vm_network_vm_lan_dhcp_from: "10.0.0.50"
    vm_network_vm_lan_dhcp_to: "10.0.0.150"

    vm_ubuntu_images:
      - id: 9001
        name: jammy
        username: ubuntu
        url: https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img
        memory: 2048
        bridge: "{{ vm_bridge_name }}"
        storage: vm-drives
    vm_debian_images:
      - id: 9501
        name: bokworm
        username: debian
        url: https://cdimage.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2
        memory: 2048
        bridge: "{{ vm_bridge_name }}"
        storage: vm-drives

  # ADD IN DEBIAN FOR MAILCOW INSTALLATION

  tasks:
    - name: Set up zpool tank and vm-drives
      ansible.builtin.include_role:
        name: zfs_filesystem
      vars:
        zfs_filesystem_install_pool: true
        zfs_filesystem_pool_name: tank
        zfs_filesystem_pool_mode: mirror
        zfs_filesystem_pool_devices: "{{ hostvars[inventory_hostname].zfs_tank_devices }}"
        zfs_filesystem_filesystems:
          - name: vm-drives
            mountpath: "/vm-drives"

    - name: Set up zpool rpool and isos and backups
      ansible.builtin.include_role:
        name: zfs_filesystem
      vars:
        zfs_filesystem_install_pool: false
        zfs_filesystem_pool_name: rpool
        zfs_filesystem_filesystems:
          - name: isos
            mountpath: "/isos"
          - name: backups
            mountpath: "/backups"

    - name: Install bridge-utils
      ansible.builtin.apt:
        name: bridge-utils

    - name: Configure /etc/network/interfaces
      ansible.builtin.template:
        src: "{{ interfaces_template }}"
        dest: /etc/network/interfaces
      register: _configure_interfaces

    - name: Reboot for network change
      when: _configure_interfaces is changed
      block:
        - name: Reboot for networking changes
          ansible.builtin.shell: "sleep 5 && shutdown -r now 'Networking changes found, rebooting'"
          async: 1
          poll: 0

        - name: Wait for server to come back online
          ansible.builtin.wait_for_connection:
            delay: 30

    - name: Test lae.proxmox
      ansible.builtin.include_role:
        name: lae.proxmox
      vars:
        - pve_group: pve
        - pve_reboot_on_kernel_update: true
        - pve_repository_line: "deb [arch=amd64] http://mirror.hetzner.com/debian/pve {{ ansible_facts.distribution_release }} pve-no-subscription"
        - pve_storages:
            - name: vm-drives
              type: dir
              content: ["images", "rootdir"]
              path: /tank/vm-drives
            - name: backups
              type: dir
              content: ["backup"]
              path: /backups
            - name: "isos"
              type: dir
              content: ["snippets", "vztmpl", "iso"]
              path: /isos

    - name: Create a snapshot of rpool
      community.general.zfs:
        name: rpool/ROOT/debian@proxmox_install
        state: present

    - name: Create a snapshot of bpool
      community.general.zfs:
        name: bpool/BOOT/debian@proxmox_install
        state: present

    - name: Cloudimages - Download ubuntu cloudimages
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "/tmp/{{ item.name }}.img"
        mode: "0644"
      with_items: "{{ vm_ubuntu_images }}"

    - name: Cloudimages - Download debian cloudimages
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "/tmp/{{ item.name }}.qcow2"
        mode: "0644"
      with_items: "{{ vm_debian_images }}"

    - name: Ubuntu cloudimages - Creating cloud-init templates
      ansible.builtin.shell: |
        qm destroy {{ item.id }}
        virt-customize -a /tmp/{{ item.name }}.img --install qemu-guest-agent
        qm create {{ item.id }} --memory {{ item.memory }} --net0 virtio,bridge={{ item.bridge }}
        qm importdisk {{ item.id }} /tmp/{{ item.name }}.img {{ item.storage }}
        qm set {{ item.id }} --scsihw virtio-scsi-pci --scsi0 {{ item.storage }}:{{ item.id }}/vm-{{ item.id }}-disk-0.raw
        qm set {{ item.id }} --ide2 {{ item.storage }}:cloudinit
        qm set {{ item.id }} --boot c --bootdisk scsi0
        qm set {{ item.id }} --serial0 socket --vga serial0
        qm template {{ item.id }}
        qm set {{ item.id }} --name template.{{ item.name }} --agent 1 --ipconfig0 ip=dhcp --sshkey /root/.ssh/authorized_keys --ciuser {{ item.username }}
      with_items: "{{ vm_ubuntu_images }}"

    - name: Debian cloudimages - Creating cloud-init templates
      ansible.builtin.shell: |
        qm destroy {{ item.id }}
        virt-customize -a /tmp/{{ item.name }}.qcow2 --install qemu-guest-agent
        qm create {{ item.id }} --memory {{ item.memory }} --net0 virtio,bridge={{ item.bridge }}
        qm importdisk {{ item.id }} /tmp/{{ item.name }}.qcow2 {{ item.storage }} -format qcow2
        qm set {{ item.id }} --scsihw virtio-scsi-pci --scsi0 {{ item.storage }}:{{ item.id }}/vm-{{ item.id }}-disk-0.raw
        qm set {{ item.id }} --ide2 {{ item.storage }}:cloudinit
        qm set {{ item.id }} --boot c --bootdisk scsi0
        qm set {{ item.id }} --serial0 socket --vga serial0
        qm template {{ item.id }}
        qm set {{ item.id }} --name template.{{ item.name }} --agent 1 --ipconfig0 ip=dhcp --sshkey /root/.ssh/authorized_keys --ciuser {{ item.username }}
      with_items: "{{ vm_debian_images }}"

    - name: Ubuntu cloudimages - Removing downloaded files
      ansible.builtin.file:
        path: "/tmp/{{ item.name }}.img"
        state: absent
      with_items: "{{ vm_ubuntu_images }}"

    - name: Debian cloudimages - Removing downloaded files
      ansible.builtin.file:
        path: "/tmp/{{ item.name }}.qcow2"
        state: absent
      with_items: "{{ vm_debian_images }}"
# Think need to use proxmox to get it put in the right place
# - name: Upload isos
#   ansible.builtin.get_url:
#     url: { { "item.url" } }
#     dest: /isos
#   with_items: "{{ vm_isos }}"
